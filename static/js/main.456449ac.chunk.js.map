{"version":3,"sources":["components/Navbar.js","components/encounter-assistant/CommandLine.js","components/encounter-assistant/TabItem.js","components/encounter-assistant/Tabs.js","components/encounter-assistant/Battlemap.js","components/encounter-assistant/Listview.js","components/encounter-assistant/Cardview.js","components/encounter-assistant/ViewInstance.js","components/EncounterAssistant.js","App.js","index.js"],"names":["Navbar","linkStyle","color","props","colorTheme","base","backgroundColor","pureHue","this","home","pages","className","to","map","page","concat","component","key","id","name","Component","CommandLine","state","command","history","selected","onChange","e","setState","target","value","length","onSubmit","preventDefault","ogCommand","tokens","toLowerCase","split","filter","el","submitCommand","push","onKeyDown","keyCode","style","width","type","ref","placeholder","TabItem","editIcon","hover","delIcon","checkIcon","activateTab","currentTarget","onKeyPress","setName","hoverOn","icon","hoverOff","clickIcon","console","log","stopPropagation","editName","delTab","$","focus","inputTab","activeTab","Fragment","onClick","inp","tabInput","aria-hidden","onMouseOver","onMouseOut","highlighted","tabColor","Tabs","tabs","tabID","input","uuid","v4","addTab","tab","newTabI","findIndex","x","setTabName","tabI","editTabName","splice","marginBottom","tabkey","tabColors","highlightedTabs","Battlemap","renderRow","row","rowkey","boardSize","squareSize","selectedSquare","highlightedSquare","localEnts","ghostEnts","square","sqkey","localSq","Object","keys","ent","parseInt","y","ghostSqs","ghostSqEnts","forEach","ghostConflicts","sq","i","ghostColor","height","background","borderRadius","highlightTabs","highlightSquare","unHighlightTabs","unHighlightSquare","onDragEnter","onDragOver","onDrop","handleDrop","draggable","border","onDragStart","evt","dataTransfer","setData","selectSquare","tabIndex","margin","Array","fill","Listview","renderItem","health","maxHealth","perc","handleClick","highlightItem","unHighlightItem","Math","floor","entNames","maxHeight","Cardview","effects","slice","effecticons","newEffect","prophealth","propx","propy","propeffects","changeVal","submitVal","newVal","Number","isInteger","parseFloat","isNaN","val","changeEffect","delEffect","submitEffects","includes","arraysMatch","arr1","arr2","title","headerColor","cursor","ef","ViewInstance","highlightedEnt","handleSquareDrop","entities","getData","hasClass","extend","updateEnts","unHighlightEnt","changeEntVal","changeEntEffects","highlightEnt","commandsToRun","comm","effect","size","entEffects","find","conflict","values","completeCommands","cardEnt","padding","textAlign","getGhostEnts","EncounterAssistant","tabNames","action","updateState","index","ents","App","updatePage","pageStates","homePageName","navPages","colorThemes","darkShade","lightShade","darkTint","lightTint","currentColorTheme","updateWindowDimensions","bind","window","addEventListener","innerWidth","innerHeight","path","render","React","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.456449ac.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport class Navbar extends Component {\r\n    linkStyle = {\r\n        color: this.props.colorTheme.base,\r\n        backgroundColor: this.props.colorTheme.pureHue,\r\n    }\r\n    render() {\r\n        const { home, pages } = this.props;\r\n        return (\r\n            <nav className=\"navbar is-fixed-top\">\r\n                <div className=\"navbar-brand\">\r\n                    <Link className=\"navbar-item\" to=\"/\">{home}</Link>\r\n                </div>\r\n                <div className=\"navbar-menu\">\r\n                    <div className=\"navbar-start\">\r\n                        {pages.map(page => (\r\n                        <Link\r\n                            className=\"navbar-item\"\r\n                            to={\"/\".concat(page.component)}\r\n                            key={page.id}>\r\n                                {page.name}\r\n                        </Link>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nNavbar.propTypes = {\r\n    home: PropTypes.string.isRequired,\r\n    pages: PropTypes.array.isRequired,\r\n    colorTheme: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { Component } from 'react'\r\n// import $ from 'jquery'\r\nimport './CommandLine.css'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport class CommandLine extends Component {\r\n    state = {\r\n        command: \"\",\r\n        history: [],\r\n        selected: 0,\r\n    };\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value, selected: this.state.history.length });\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        let { command, history, selected } = this.state;\r\n        let ogCommand = selected===history.length?command:history[selected];\r\n        command = ogCommand.toLowerCase();\r\n        // tokenize command\r\n        let tokens = command.split(' ').filter(el => el !== ' ' && el !== '');\r\n        if (tokens!=null) {\r\n            this.props.submitCommand(tokens);\r\n            history.push(ogCommand);\r\n            this.setState({ command: '', history, selected: history.length });\r\n        }\r\n    }\r\n\r\n    onKeyDown = (e) => {\r\n        let { history, selected } = this.state;\r\n        switch (e.keyCode) {\r\n        case 38: //up\r\n            if (selected > 0) selected--;\r\n            break;\r\n        case 40: //down\r\n            if (selected < history.length) selected++;\r\n            break;\r\n        default:\r\n        }\r\n        this.setState({ selected });\r\n    }\r\n\r\n    render() {\r\n        const { command, history, selected } = this.state;\r\n\r\n        return (\r\n        <div className=\"columns is-centered commandLine\" style={{width: \"100%\",backgroundColor:\"whitesmoke\"}}>\r\n        <div className=\"column is-half\">\r\n        <form onSubmit={this.onSubmit}>\r\n        <div className=\"field commandField\">\r\n            <div className=\"control commInp\">\r\n                <input\r\n                    className=\"input is-rounded\"\r\n                    name=\"command\"\r\n                    type=\"text\"\r\n                    ref=\"input\"\r\n                    placeholder=\"command...\"\r\n                    value={selected===history.length?command:history[selected]}\r\n                    onChange={this.onChange}\r\n                    onKeyDown={this.onKeyDown}\r\n                />\r\n            </div>\r\n            <div className=\"control commBtn\">\r\n                <button className=\"button is-rounded is-info\">Enter</button>\r\n            </div>\r\n        </div>\r\n        </form>\r\n        </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nCommandLine.propTypes = {\r\n    submitCommand: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default CommandLine\r\n","import React, { Component } from 'react'\r\nimport $ from 'jquery'\r\nimport './TabItem.css'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport class TabItem extends Component {\r\n    state = {\r\n        name: this.props.name,\r\n        editIcon: {\r\n            hover: false,\r\n        },\r\n        delIcon: {\r\n            hover: false,\r\n        },\r\n        checkIcon: {\r\n            hover: false,\r\n        },\r\n    };\r\n\r\n    componentDidUpdate() {\r\n        $(`#${this.props.id} input`).focus();\r\n    }\r\n\r\n    activateTab = () => {\r\n        this.props.activateTab(this.props.id);\r\n        this.setState({\r\n            name: this.props.name,\r\n            editIcon: {\r\n                hover: false,\r\n            },\r\n            delIcon: {\r\n                hover: false,\r\n            },\r\n            checkIcon: {\r\n                hover: false,\r\n            },\r\n        });\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({ name: e.currentTarget.value });\r\n    }\r\n\r\n    onKeyPress = (e) => {\r\n        if (e.key === \"Enter\" && this.state.name !== \"\") {\r\n            this.props.setName(this.props.id, this.state.name);\r\n        }\r\n    }\r\n\r\n    hoverOn = (e) => {\r\n        let icon = this.state[e.target.id];\r\n        icon.hover = true;\r\n        this.setState({ [e.target.id]: icon });\r\n    }\r\n\r\n    hoverOff = (e) => {\r\n        let icon = this.state[e.target.id];\r\n        icon.hover = false;\r\n        this.setState({ [e.target.id]: icon });\r\n    }\r\n\r\n    clickIcon = (e) => {\r\n        console.log(\"clicl\")\r\n        e.stopPropagation();\r\n        this.hoverOff(e);\r\n        const { id } = this.props;\r\n        switch (e.target.id) {\r\n        case \"editIcon\":\r\n            this.props.editName(id);\r\n            break;\r\n        case \"delIcon\":\r\n            this.props.delTab(id);\r\n            break;\r\n        case \"checkIcon\":\r\n            if (this.state.name !== \"\") {\r\n                this.props.setName(id, this.state.name);\r\n            }\r\n            break;\r\n        default:\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { id, name, inputTab, activeTab } = this.props;\r\n        const { editIcon, delIcon, checkIcon } = this.state;\r\n\r\n        return (\r\n        <React.Fragment>\r\n        {inputTab ?\r\n        <li\r\n            id={id}\r\n            className={\"group inputTab \".concat(activeTab?\"is-active\":\"\")}\r\n            onClick={this.activateTab}>\r\n            <p className=\"tabP\">\r\n                <input\r\n                    className=\"input is-small\"\r\n                    type=\"text\"\r\n                    placeholder=\"alias...\"\r\n                    value={this.state.name}\r\n                    ref={(inp) => this.tabInput = inp}\r\n                    onChange={this.onChange}\r\n                    onKeyPress={this.onKeyPress}\r\n                    onClick={(e) => e.stopPropagation()}\r\n                />\r\n                <span className=\"icon is-small\">\r\n                    <i\r\n                        className=\"fas fa-check\"\r\n                        aria-hidden=\"true\"\r\n                        id=\"checkIcon\"\r\n                        onMouseOver={this.hoverOn}\r\n                        onMouseOut={this.hoverOff}\r\n                        onClick={this.clickIcon}\r\n                        style={checkIcon.hover?{color: \"red\"}:null}>\r\n                    </i>\r\n                </span>\r\n            </p>\r\n        </li>\r\n        :\r\n        <li\r\n            id={id}\r\n            className={\"group displayTab \".concat(activeTab?\"is-active\":\"\")}\r\n            onClick={this.activateTab}>\r\n            <p className=\"tabP\" style={{backgroundColor: this.props.highlighted?this.props.tabColor:\"\"}}>\r\n                <span>{name}</span>\r\n                {activeTab ?\r\n                <span className=\"icons\">\r\n                <span className=\"icon is-small\">\r\n                    <i\r\n                        className=\"far fa-edit\"\r\n                        aria-hidden=\"true\"\r\n                        id=\"editIcon\"\r\n                        onMouseOver={this.hoverOn}\r\n                        onMouseOut={this.hoverOff}\r\n                        onClick={this.clickIcon}\r\n                        style={editIcon.hover?{color: \"red\"}:null}>\r\n                    </i>\r\n                </span>\r\n                <span className=\"icon is-small\">\r\n                    <i\r\n                        className=\"fas fa-trash-alt\"\r\n                        aria-hidden=\"true\"\r\n                        id=\"delIcon\"\r\n                        onMouseOver={this.hoverOn}\r\n                        onMouseOut={this.hoverOff}\r\n                        onClick={this.clickIcon}\r\n                        style={delIcon.hover?{color: \"red\"}:null}>\r\n                    </i>\r\n                </span>\r\n                </span>\r\n                :(name === \"\" ?\r\n                <span className=\"icon is-small\">\r\n                    <i className=\"fas fa-plus\" aria-hidden=\"true\"></i>\r\n                </span>\r\n                :null)}\r\n            </p>\r\n        </li>}\r\n        </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nTabItem.propTypes = {\r\n    id: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number,\r\n    ]).isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    inputTab: PropTypes.bool.isRequired,\r\n    activeTab: PropTypes.bool.isRequired,\r\n    activateTab: PropTypes.func.isRequired,\r\n    setName: PropTypes.func.isRequired,\r\n    editName: PropTypes.func.isRequired,\r\n    delTab: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default TabItem\r\n","import React, { Component } from 'react'\r\nimport TabItem from './TabItem'\r\nimport PropTypes from 'prop-types'\r\nimport uuid from 'uuid';\r\n\r\nexport class Tabs extends Component {\r\n    state = {\r\n        tabs: [{\r\n            id: this.props.tabID,\r\n            name: \"New Group\",\r\n            input: false,\r\n        }, {\r\n            id: uuid.v4(),\r\n            name: \"\",\r\n            input: false,\r\n        }],\r\n    };\r\n\r\n    addTab = () => {\r\n        let { tabs } = this.state;\r\n        tabs.push({\r\n            id: uuid.v4(),\r\n            name: \"\",\r\n            input: false,\r\n        });\r\n        this.setState({ tabs });\r\n        this.props.addTab();\r\n    }\r\n\r\n    activateTab = (tab) => {\r\n        let { tabs } = this.state;\r\n        let { activeTab } = this.props;\r\n        if (activeTab === tab) return;\r\n        tabs = tabs.map(tab => {\r\n            tab.input = false;\r\n            return tab;\r\n        });\r\n        let newTabI = tabs.findIndex(x => x.id === tab && x.name === \"\");\r\n        if (newTabI!=null && tabs[newTabI]!=null) tabs[newTabI].input = true;\r\n        this.setState({ tabs });\r\n        this.props.activateTab(tabs.findIndex(x => x.id === tab));\r\n    }\r\n\r\n    setTabName = (id, name) => {\r\n        let { tabs } = this.state;\r\n        let tabI = tabs.findIndex(x => x.id === id);\r\n        if (tabI >= 0 && tabs[tabI] != null) {\r\n            tabs[tabI].input = false;\r\n            if (tabs[tabI].name === \"\") this.addTab();\r\n            tabs[tabI].name = name;\r\n        }\r\n        this.setState({ tabs });\r\n        this.props.setTabName(tabI, name);\r\n    }\r\n\r\n    editTabName = (id) => {\r\n        let { tabs } = this.state;\r\n        let tabI = tabs.findIndex(x => x.id === id);\r\n        if (tabI >= 0 && tabs[tabI] != null) {\r\n            tabs[tabI].input = true;\r\n        }\r\n        this.setState({ tabs });\r\n    }\r\n\r\n    delTab = (id) => {\r\n        let { tabs } = this.state;\r\n        let tabI = tabs.findIndex(x => x.id === id);\r\n        if (tabI >= 0 && tabs[tabI] != null) {\r\n            tabs.splice(tabI, 1);\r\n        }\r\n        this.setState({ tabs });\r\n        this.props.delTab(tabI);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"tabs is-boxed\" style={{marginBottom: \"1em\"}}>\r\n        <ul>\r\n            {this.state.tabs.map((tab, tabkey) => \r\n                <TabItem\r\n                    id={tab.id}\r\n                    name={tab.name}\r\n                    inputTab={tab.input}\r\n                    activeTab={tabkey === this.props.activeTab}\r\n                    tabColor={this.props.tabColors[tabkey]}\r\n                    highlighted={this.props.highlightedTabs.filter(x => x===tabkey).length!==0}\r\n                    activateTab={this.activateTab}\r\n                    setName={this.setTabName}\r\n                    editName={this.editTabName}\r\n                    delTab={this.delTab}\r\n                    key={tab.id}\r\n                />\r\n            )}\r\n        </ul>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nTabs.propTypes = {\r\n    tabID: PropTypes.string.isRequired,\r\n    addTab: PropTypes.func.isRequired,\r\n    delTab: PropTypes.func.isRequired,\r\n    activateTab: PropTypes.func.isRequired,\r\n    setTabName: PropTypes.func.isRequired,\r\n    highlightedTabs: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default Tabs\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './Battlemap.css'\r\n\r\nexport class Battlemap extends Component {\r\n\r\n    renderRow = (row, rowkey) => {\r\n        const { boardSize, squareSize, selectedSquare, highlightedSquare, localEnts, ghostEnts, tabColors } = this.props;\r\n        return (\r\n        <tr className=\"battlemapRow\" key={rowkey}>\r\n            {row.map((square, sqkey) => {\r\n                // everything here happens at an individual square\r\n                \r\n                // is square local entity\r\n                let localSq = Object.keys(localEnts).filter(ent => {\r\n                    return parseInt(localEnts[ent].x)===sqkey && parseInt(localEnts[ent].y)===boardSize-rowkey-1;\r\n                })[0];\r\n                // get global entities\r\n                let ghostSqs = []; let ghostSqEnts = [];\r\n                ghostEnts.forEach((tab, tabkey) => {\r\n                    Object.keys(tab).forEach(ent => {\r\n                        if (parseInt(tab[ent].x)===sqkey && parseInt(tab[ent].y)===boardSize-rowkey-1) {\r\n                            ghostSqs.push(tabkey); ghostSqEnts.push(ent);\r\n                        }\r\n                    });\r\n                });\r\n                // display local rather than global\r\n                if (localSq) ghostSqs = [];\r\n                // global entities' nationalities\r\n                let ghostConflicts = ghostSqs.map((sq,i) => {\r\n                                // color                            starting %                      ending %\r\n                    return `${tabColors[sq%tabColors.length]} ${(100/ghostSqs.length)*(i)}% ${(100/ghostSqs.length)*(i+1)}%`;\r\n                });\r\n                // global entity nationality\r\n                let ghostColor = ghostSqs.length!==0?ghostSqs.length===1?tabColors[ghostSqs[0]%tabColors.length]:\"\":\"\";\r\n                console.log(localSq===selectedSquare)\r\n                return (\r\n                <td\r\n                    className={\"battlemapSquare \".concat(localSq?\"is-local-ent\":(ghostSqs.length!==0?\"is-ghost-ent\":\"\")).concat(highlightedSquare===localSq?\" is-highlighted\":\"\")}\r\n                    key={sqkey}\r\n                    style={{\r\n                        width: squareSize,\r\n                        height: squareSize,\r\n                        background: ghostSqs.length>1?`linear-gradient(135deg, ${ghostConflicts})`:ghostColor,\r\n                        borderRadius: \"8px\",\r\n                    }}\r\n                    onMouseOver={() => ghostSqs.length!==0?this.props.highlightTabs(ghostSqs):localSq!=null?this.props.highlightSquare(localSq):null}\r\n                    onMouseOut={() => ghostSqs.length!==0?this.props.unHighlightTabs():localSq!=null?this.props.unHighlightSquare():null}\r\n                    onClick={() => this.props.activateTab(localSq, ghostSqs, ghostSqEnts)}\r\n                    onDragEnter={(e) => e.preventDefault()}\r\n                    onDragOver={(e) => e.preventDefault()}\r\n                    onDrop={(e) => this.props.handleDrop(sqkey, boardSize-rowkey-1, e)}>\r\n                        {localSq?\r\n                        <div\r\n                            className=\"cell\"\r\n                            draggable=\"true\"\r\n                            style={{\r\n                                border: localSq===selectedSquare?\"4px solid #eace17\":\"\",\r\n                                borderRadius: \"2px\",\r\n                            }}\r\n                            onDragStart={(evt) => {\r\n                                let dt = evt.dataTransfer;\r\n                                dt.setData('Text', localSq);\r\n                            }}\r\n                            onClick={() => this.props.selectSquare(localSq)}>\r\n                        </div>\r\n                        :null}\r\n                </td>);\r\n            })}\r\n        </tr>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let { boardSize } = this.props;\r\n\r\n        return (\r\n        <table className=\"battlemap\" tabIndex=\"0\" style={{margin: `${this.props.squareSize/4}px`}}>\r\n        <tbody>\r\n            {Array(boardSize).fill(Array(boardSize).fill(null)).map((row, key) => \r\n                this.renderRow(row, key)\r\n            )}\r\n        </tbody>\r\n        </table>\r\n        );\r\n    }\r\n}\r\n\r\nBattlemap.propTypes = {\r\n    boardSize: PropTypes.number.isRequired,\r\n    squareSize: PropTypes.number.isRequired,\r\n    selectSquare: PropTypes.func.isRequired,\r\n    localEnts: PropTypes.object.isRequired,\r\n    ghostEnts: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default Battlemap;\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './Listview.css'\r\n\r\nexport class Listview extends Component {\r\n    renderItem = (name, health, maxHealth) => {\r\n        let perc = parseInt(health)/parseInt(maxHealth)*100;\r\n        console.log(name, this.props.highlighted)\r\n        return (\r\n        <div\r\n            className={\"listEnt columns \".concat(this.props.selected===name?\"is-selected\":this.props.highlighted===name?\"is-highlighted\":\"\")}\r\n            key={name}\r\n            style={{ height: `${this.props.height}px` }}\r\n            onClick={() => this.props.handleClick(name)}\r\n            onMouseOver={() => this.props.highlightItem(name)}\r\n            onMouseOut={() => this.props.unHighlightItem()}>\r\n                <div className=\"entName column is-narrow\">\r\n                    <h3 className=\"title is-5\">{name}</h3>\r\n                </div>\r\n                <div\r\n                    className=\"entHealth column\"\r\n                    style={{\r\n                        background: `linear-gradient(to right, #4f934f ${perc}%, #db4343 0)`,\r\n                    }}>\r\n                        <h3 className=\"title is-5\">{health}/{maxHealth} | {Math.floor(perc)}%</h3>\r\n                </div>\r\n        </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { entNames, localEnts, maxHeight } = this.props;\r\n\r\n        return (\r\n        <div className=\"listview\" style={{height: `${maxHeight}px`, maxHeight: `${maxHeight}px`}}>\r\n            {entNames.length > 0 ?\r\n                entNames.map(name => this.renderItem(name, localEnts[name].health, localEnts[name].maxHealth))\r\n            :\r\n            <div className=\"blankList\">\r\n                <div className=\"blankWrapper\">\r\n                    <h1 className=\"title is-3\">No entities to display</h1>\r\n                    <h2 className=\"subtitle is-5\">Try adding to entity to display a list item here</h2>\r\n                </div>\r\n            </div>\r\n            }\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nListview.propTypes = {\r\n    entNames: PropTypes.array.isRequired,\r\n    localEnts: PropTypes.object.isRequired,\r\n    height: PropTypes.number.isRequired,\r\n    maxHeight: PropTypes.number.isRequired,\r\n    handleClick: PropTypes.func.isRequired,\r\n    selected: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Listview;\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './Cardview.css'\r\n\r\nexport class Cardview extends Component {\r\n    state = {\r\n        name: this.props.name,\r\n        health: this.props.health,\r\n        x: this.props.x,\r\n        y: this.props.y,\r\n        effects: this.props.effects.slice(),\r\n        effecticons: Array(this.props.effects.length).fill(false),\r\n        newEffect: \"\",\r\n        prophealth: this.props.health,\r\n        propx: this.props.x,\r\n        propy: this.props.y,\r\n        propeffects: this.props.effects.slice(),\r\n    };\r\n\r\n    componentDidUpdate() {\r\n        const { name } = this.props;\r\n        const { prophealth, propx, propy, propeffects } = this.state;\r\n        if (name!==this.state.name || prophealth!==this.props.health || propx!==this.props.x || propy!==this.props.y || !this.arraysMatch(propeffects, this.props.effects)) this.setState({\r\n            name,\r\n            health: this.props.health,\r\n            x: this.props.x,\r\n            y: this.props.y,\r\n            effects: this.props.effects.slice(),\r\n            prophealth: this.props.health,\r\n            propx: this.props.x,\r\n            propy: this.props.y,\r\n            propeffects: this.props.effects.slice(),\r\n        });\r\n    }\r\n\r\n    changeVal = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    submitVal = (e) => {\r\n        let newVal = e.target.value;\r\n        if (e.key===\"Enter\" && Number.isInteger(parseFloat(newVal)) && !isNaN(newVal)) {\r\n            this.props.changeVal(e.target.name, newVal);\r\n            this.setState({ [\"prop\".concat(e.target.name)]: e.target.val });\r\n        }\r\n    }\r\n\r\n    changeEffect = (e, i) => {\r\n        let { effects } = this.state;\r\n        effects[i] = e.target.value;\r\n        this.setState({ effects });\r\n    }\r\n\r\n    delEffect = (i) => {\r\n        let { effects } = this.state;\r\n        effects.splice(i,1);\r\n        this.setState({ effects });\r\n        this.props.changeVal(\"effects\", effects);\r\n    }\r\n\r\n    submitEffects = (e) => {\r\n        let { newEffect, effects } = this.state;\r\n        if (e.key===\"Enter\") {\r\n            if (newEffect!=null && newEffect.length!==0 && !effects.includes(newEffect)) {\r\n                effects.push(newEffect);\r\n                newEffect = \"\";\r\n                this.setState({ effects, newEffect });\r\n                this.props.changeVal(\"effects\", effects);\r\n            }\r\n        }\r\n    }\r\n\r\n    hoverOn = (i) => {\r\n        let { effecticons } = this.state;\r\n        effecticons[i] = true;\r\n        this.setState({ effecticons });\r\n    }\r\n\r\n    hoverOff = (i) => {\r\n        let { effecticons } = this.state;\r\n        effecticons[i] = false;\r\n        this.setState({ effecticons });\r\n    }\r\n\r\n    arraysMatch = (arr1, arr2) => {\r\n        if (arr1.length !== arr2.length) return false;\r\n    \r\n        for (var i = 0; i < arr1.length; i++) {\r\n            if (arr1[i] !== arr2[i]) return false;\r\n        }\r\n    \r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        const { maxHeight, title, name } = this.props;\r\n        const { health, x, y, effects, effecticons, newEffect } = this.state;\r\n\r\n        return (\r\n        <div className=\"card\" style={{height: `${maxHeight}px`, maxHeight: `${maxHeight}px`}}>\r\n            <header className=\"card-header\" style={{backgroundColor:this.props.headerColor}}>\r\n                <p className=\"card-header-title\" style={{backgroundColor:this.props.headerColor,cursor:\"default\"}}>{title}</p>\r\n            </header>\r\n            <div className=\"card-content\">\r\n                <div className=\"content\">\r\n                    <h1>Name: {name}</h1>\r\n                    <div className=\"field is-horizontal\">\r\n                        <div className=\"field-label is-normal\">\r\n                            <label className=\"label\">Health</label>\r\n                        </div>\r\n                        <div className=\"field-body\">\r\n                            <div className=\"field\">\r\n                                <div className=\"control is-expanded healthInput\">\r\n                                    <input\r\n                                        className={\"input \".concat(!Number.isInteger(parseFloat(health))||isNaN(health)?\"is-danger\":(health!==this.props.health?\"is-warning\":\"\"))}\r\n                                        name=\"health\"\r\n                                        type=\"text\"\r\n                                        placeholder=\"health...\"\r\n                                        value={health}\r\n                                        onChange={this.changeVal}\r\n                                        onKeyPress={this.submitVal}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <label className=\"label\">Position</label>\r\n                    <div className=\"field is-horizontal\">\r\n                        <div className=\"field-label is-normal xLabel\">\r\n                            <label className=\"label\">X</label>\r\n                        </div>\r\n                        <div className=\"field-body\">\r\n                            <div className=\"field\">\r\n                                <div className=\"control is-expanded xInput\">\r\n                                    <input\r\n                                        className={\"input \".concat(!Number.isInteger(parseFloat(x))||isNaN(x)?\"is-danger\":(x!==this.props.x?\"is-warning\":\"\"))}\r\n                                        name=\"x\"\r\n                                        type=\"text\"\r\n                                        placeholder=\"x...\"\r\n                                        value={x}\r\n                                        onChange={this.changeVal}\r\n                                        onKeyPress={this.submitVal}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"field is-horizontal\">\r\n                        <div className=\"field-label is-normal yLabel\">\r\n                            <label className=\"label\">Y</label>\r\n                        </div>\r\n                        <div className=\"field-body\">\r\n                            <div className=\"field\">\r\n                                <div className=\"control is-expanded yInput\">\r\n                                    <input\r\n                                        className={\"input \".concat(!Number.isInteger(parseFloat(y))||isNaN(y)?\"is-danger\":(y!==this.props.y?\"is-warning\":\"\"))}\r\n                                        name=\"y\"\r\n                                        type=\"text\"\r\n                                        placeholder=\"y...\"\r\n                                        value={y}\r\n                                        onChange={this.changeVal}\r\n                                        onKeyPress={this.submitVal}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"field\">\r\n                        <label className=\"label\">Effects</label>\r\n                        <nav className=\"panel effectsPanel\">\r\n                            {effects !== null && effects.length !== 0 ?\r\n                            effects.map((ef, key) => {\r\n                                return (\r\n                                <a\r\n                                    className=\"panel-block is-active textInput\"\r\n                                    key={key}\r\n                                    onMouseOver={() => this.hoverOn(key)}\r\n                                    onMouseOut={() => this.hoverOff(key)}>\r\n                                        {effecticons[key] ?\r\n                                        <span className=\"panel-icon\">\r\n                                            <i\r\n                                                className=\"fas fa-trash-alt\"\r\n                                                aria-hidden=\"true\"\r\n                                                onClick={() => this.delEffect(key)}>\r\n                                            </i>\r\n                                        </span>\r\n                                        :\r\n                                        <span className=\"panel-icon\">\r\n                                            <i className=\"fas fa-dice-d20\" aria-hidden=\"true\"></i>\r\n                                        </span>\r\n                                        }\r\n                                        <div className=\"control\">\r\n                                            <input\r\n                                                className={\"input \".concat(ef!==this.props.effects[key]?\"is-warning\":\"\")}\r\n                                                type=\"text\"\r\n                                                placeholder=\"effect...\"\r\n                                                value={ef}\r\n                                                onChange={(e) => this.changeEffect(e, key)}\r\n                                                onKeyPress={this.submitEffects}\r\n                                            />\r\n                                        </div>\r\n                                </a>\r\n                                );\r\n                            })\r\n                            :null}\r\n                            <a className=\"panel-block is-active textInput\">\r\n                                <span className=\"panel-icon\">\r\n                                    <i className=\"fas fa-dice-d20\" aria-hidden=\"true\"></i>\r\n                                </span>\r\n                                <div className=\"control\">\r\n                                    <input\r\n                                        className=\"input\"\r\n                                        name=\"newEffect\"\r\n                                        type=\"text\"\r\n                                        placeholder=\"effect...\"\r\n                                        value={newEffect}\r\n                                        onChange={this.changeVal}\r\n                                        onKeyPress={this.submitEffects}\r\n                                    />\r\n                                </div>\r\n                            </a>\r\n                        </nav>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nCardview.propTypes = {\r\n    headerColor: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    health: PropTypes.string.isRequired,\r\n    x: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number\r\n    ]).isRequired,\r\n    y: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number\r\n    ]).isRequired,\r\n    effects: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default Cardview;\r\n","import React, { Component } from 'react'\r\nimport $ from 'jquery'\r\nimport Battlemap from './Battlemap'\r\nimport Listview from './Listview'\r\nimport Cardview from './Cardview'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport class ViewInstance extends Component {\r\n    state = {\r\n        selectedSquare: null,\r\n        boardSize: 10,\r\n        highlightedEnt: \"\",\r\n    };\r\n\r\n    componentDidUpdate() {\r\n        let { boardSize } = this.state;\r\n        let { entities } = this.props;\r\n\r\n        // run commands in prop queue\r\n        this.props.commandsToRun.forEach(comm => {\r\n            let ent, x, y, effect, value, health, size;\r\n            switch(comm[0]) {\r\n            case \"move\":\r\n                [ ent, x, y ] = comm.slice(1,4);\r\n                if (entities!=null && entities[ent]!=null &&\r\n                    x!=null && !isNaN(parseInt(x)) &&\r\n                    y!=null && !isNaN(parseInt(y))) {\r\n                        entities[ent] = $.extend(entities[ent], {\r\n                            x: parseInt(x),\r\n                            y: parseInt(y),\r\n                        });\r\n                    }\r\n                else {\r\n                    console.log(\"Error. Unable to move entity.\");\r\n                }\r\n                break;\r\n            case \"effect\":\r\n                [ ent, effect ] = comm.slice(1, 3);\r\n                if (entities!=null && entities[ent]!=null && effect!=null) {\r\n                    let entEffects = entities[ent].effects;\r\n                    if (entEffects.find(ef => ef===effect)) {\r\n                        entities[ent] = $.extend(entities[ent], {\r\n                            effects: entEffects.filter(ef => ef!==effect),\r\n                        });\r\n                    } else {\r\n                        entities[ent] = $.extend(entities[ent], {\r\n                            effects: entities[ent].effects.concat([effect]),\r\n                        });\r\n                    }\r\n                }\r\n                break;\r\n            case \"health\":\r\n                [ ent, value ] = comm.slice(1, 3);\r\n                if (isNaN(value)) value = null;\r\n                if (entities!=null && entities[ent]!=null && value!=null) {\r\n                    if (value.includes(\"+\") || value.includes(\"-\")) {\r\n                        entities[ent] = $.extend(entities[ent], {\r\n                            health: +entities[ent].health + +parseInt(value),\r\n                        });\r\n                    } else {\r\n                        entities[ent] = $.extend(entities[ent], {\r\n                            health: parseInt(value),\r\n                        });\r\n                    }\r\n                } else {\r\n                    console.log(\"Error. Unable to modify entity health.\");\r\n                }\r\n                break;\r\n            case \"add\":\r\n                [ ent, health, x, y ] = comm.slice(1,5);\r\n                let conflict = Object.values(entities).filter(el => (\r\n                    parseInt(el.x) === parseInt(x) && parseInt(el.y) === parseInt(y)\r\n                )).length !== 0;\r\n                if (entities[ent]==null && health!=null && x!=null && y!=null && conflict===false) {\r\n                    entities[ent] = {\r\n                        maxHealth: health,\r\n                        health,\r\n                        x,\r\n                        y,\r\n                        effects: [],\r\n                        size: 1,\r\n                    };\r\n                } else if (entities[ent]!=null) {\r\n                    console.log(\"Error. Entity with that name already exists.\", entities);\r\n                    console.log(entities[ent]==null, health!=null, x!=null, y!=null, conflict===false)\r\n                } else if (conflict===true) {\r\n                    console.log(\"Error. Entity already exists at the location.\", conflict);\r\n                } else {\r\n                    console.log(\"Error. Unable to add entity.\", entities);\r\n                }\r\n                break;\r\n            case \"del\":\r\n                [ ent ] = comm.slice(1,2);\r\n                if (entities!=null && entities[ent]!=null) {\r\n                    delete entities[ent];\r\n                } else {\r\n                    console.log(\"Error. Unable to delete entity.\");\r\n                }\r\n                break;\r\n            case \"board\":\r\n                [ size ] = comm.slice(1,2);\r\n                if (size!=null) {\r\n                    boardSize = parseInt(size);\r\n                } else {\r\n                    console.log(\"Error. Unable to modify board size.\");\r\n                }\r\n                break;\r\n            default:\r\n            }\r\n            \r\n            this.setState({ boardSize });\r\n            this.props.updateEnts(entities);\r\n        });\r\n\r\n        this.props.completeCommands();\r\n    }\r\n\r\n    handleSquareDrop = (x, y, evt) => {\r\n        evt.preventDefault();\r\n        let { entities } = this.props;\r\n        let ent = evt.dataTransfer.getData('Text');\r\n        if (!$(evt.currentTarget).hasClass(\"is-local-ent\") && entities[ent] != null) {\r\n            entities[ent] = $.extend(entities[ent], {\r\n                x: parseInt(x),\r\n                y: parseInt(y),\r\n            });\r\n            this.props.updateEnts(entities);\r\n            this.unHighlightEnt();\r\n        }\r\n    }\r\n\r\n    changeEntVal = (name, value) => {\r\n        let { selectedSquare } = this.state;\r\n        let { entities } = this.props;\r\n        entities[selectedSquare][name] = value;\r\n        this.props.updateEnts(entities);\r\n    }\r\n\r\n    changeEntEffects = (effects) => {\r\n        \r\n    }\r\n\r\n    highlightEnt = (ent) => {\r\n        console.log(ent)\r\n        this.setState({ highlightedEnt: ent });\r\n    }\r\n\r\n    unHighlightEnt = () => {\r\n        this.setState({ highlightedEnt: \"\" });\r\n    }\r\n\r\n    render() {\r\n        const { selectedSquare, boardSize, highlightedEnt } = this.state;\r\n        const { entities, color, tabColors } = this.props;\r\n        const cardEnt = selectedSquare!=null && entities!=null ? entities[selectedSquare] : null;\r\n        console.log(highlightedEnt)\r\n        return (\r\n        <div className=\"viewInstance columns\" style={{width: \"100%\", margin:0}}>\r\n            <div className=\"column is-4\" style={{padding:0,textAlign:\"center\"}}>\r\n            <Battlemap\r\n                boardSize={boardSize}\r\n                squareSize={(this.props.width*(4/12)-boardSize)*.95/boardSize}\r\n                selectedSquare={selectedSquare}\r\n                selectSquare={(square) => this.setState({ selectedSquare: square })}\r\n                highlightedSquare={highlightedEnt}\r\n                highlightSquare={this.highlightEnt}\r\n                unHighlightSquare={this.unHighlightEnt}\r\n                tabColors={tabColors}\r\n                localEnts={entities}\r\n                ghostEnts={this.props.getGhostEnts()}\r\n                highlightTabs={this.props.highlightTabs}\r\n                unHighlightTabs={this.props.unHighlightTabs}\r\n                activateTab={(localSq, ghostSqs, ghostSqEnts) => {\r\n                    if (!localSq && ghostSqs.length===1 && ghostSqEnts.length===1) {\r\n                        this.props.unHighlightTabs();\r\n                        this.props.activateTab(ghostSqs[0]);\r\n                        this.setState({ selectedSquare: ghostSqEnts[0] });\r\n                    } else if (!localSq) {\r\n                        this.setState({ selectedSquare: null });\r\n                    }\r\n                }}\r\n                handleDrop={this.handleSquareDrop}\r\n            />\r\n            </div>\r\n            <div className=\"column is-4\" style={{backgroundColor: \"white\"}}>\r\n            <Listview\r\n                entNames={Object.keys(entities)}\r\n                localEnts={entities}\r\n                height={this.props.height/14}\r\n                maxHeight={(this.props.width*(4/12)-boardSize)*.95}\r\n                handleClick={(square) => this.setState({ selectedSquare: square })}\r\n                selected={selectedSquare}\r\n                highlighted={highlightedEnt}\r\n                highlightItem={this.highlightEnt}\r\n                unHighlightItem={this.unHighlightEnt}\r\n            />\r\n            </div>\r\n            <div className=\"column is-4 cardCol\">\r\n            {cardEnt != null ?\r\n            <Cardview\r\n                maxHeight={(this.props.width*(4/12)-boardSize)*.95}\r\n                headerColor={color}\r\n                title={this.props.name}\r\n                name={selectedSquare}\r\n                health={cardEnt ? cardEnt.health : null}\r\n                x={cardEnt ? cardEnt.x : null}\r\n                y={cardEnt ? cardEnt.y : null}\r\n                effects={cardEnt ? cardEnt.effects : null}\r\n                changeVal={this.changeEntVal}\r\n            />\r\n            :\r\n            <div className=\"blankCard\">\r\n                <h1 className=\"title is-3\">No entity selected</h1>\r\n                <h2 className=\"subtitle is-5\">Selected an entity on the Battlemap to display a card here</h2>\r\n            </div>\r\n            }\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nViewInstance.propTypes = {\r\n    width: PropTypes.number.isRequired,\r\n    height: PropTypes.number.isRequired,\r\n    color: PropTypes.string.isRequired,\r\n    tabColors: PropTypes.array.isRequired,\r\n    commandsToRun: PropTypes.array.isRequired,\r\n    completeCommands: PropTypes.func.isRequired,\r\n    getGhostEnts: PropTypes.func.isRequired,\r\n    updateEnts: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ViewInstance;\r\n","import React, { Component } from 'react'\r\nimport $ from 'jquery'\r\nimport CommandLine from './encounter-assistant/CommandLine'\r\nimport Tabs from './encounter-assistant/Tabs'\r\nimport ViewInstance from './encounter-assistant/ViewInstance'\r\nimport PropTypes from 'prop-types'\r\nimport uuid from 'uuid'\r\nimport './EncounterAssistant.css'\r\n\r\nexport class EncounterAssistant extends Component {\r\n    state = {\r\n        entities: [{}],\r\n        tabNames: [\"New Group\", \"\"],\r\n        tabColors: [\r\n            \"lightcoral\",\r\n            \"lightblue\",\r\n            \"lightgreen\",\r\n            \"lightgoldenrodyellow\",\r\n            \"lightsalmon\",\r\n            \"lightseagreen\",\r\n            \"lightslategrey\",\r\n        ],\r\n        highlightedTabs: [],\r\n        activeTab: 0,\r\n        action: \"\",\r\n        commandsToRun: [],\r\n    };\r\n\r\n    componentDidMount() {\r\n        if (this.props.state!=null) this.setState(this.props.state);\r\n    }\r\n\r\n    addTab = () => {\r\n        let { boardSize, entities } = this.state;\r\n        entities.push({});\r\n        this.setState({ tabNames: this.state.tabNames.concat([\"\"]), entities });\r\n        this.props.updateState(this.state);\r\n    }\r\n\r\n    delTab = (index) => {\r\n        let { tabNames, entities } = this.state;\r\n        tabNames.splice(index, 1);\r\n        entities.splice(index, 1);\r\n        this.setState({ tabNames, entities, activeTab: null });\r\n        this.props.updateState(this.state);\r\n    }\r\n\r\n    activateTab = (index) => {\r\n        this.setState({ activeTab: index });\r\n        this.props.updateState(this.state);\r\n    }\r\n\r\n    setTabName = (index, name) => {\r\n        let { tabNames } = this.state;\r\n        tabNames[index] = name;\r\n        this.setState({ tabNames });\r\n        this.props.updateState(this.state);\r\n    }\r\n\r\n    getGhostEnts = () => {\r\n        let { activeTab, entities } = this.state;\r\n        let ghostEnts = [];\r\n        entities.forEach((tab, i) => {\r\n            if (i !== activeTab) {\r\n                ghostEnts.push(tab);\r\n            } else {\r\n                ghostEnts.push({});\r\n            }\r\n        });\r\n        return ghostEnts;\r\n    }\r\n\r\n    highlightTabs = (tabs) => {\r\n        this.setState({ highlightedTabs: tabs });\r\n    }\r\n\r\n    unHighlightTabs = () => {\r\n        this.setState({ highlightedTabs: [] });\r\n    }\r\n\r\n    submitCommand = (tokens) => {\r\n        let { commandsToRun } = this.state;\r\n        commandsToRun.push(tokens);\r\n        this.setState({ commandsToRun });\r\n    }\r\n\r\n    completeCommands = () => {\r\n        if (this.state.commandsToRun.length > 0) {\r\n            this.setState({ commandsToRun: [] });\r\n        }\r\n    }\r\n\r\n    updateEnts = (ents) => {\r\n        let { entities, activeTab } = this.state;\r\n        entities[activeTab] = ents;\r\n        this.setState({ entities });\r\n    }\r\n\r\n    render() {\r\n        const { tabNames, activeTab, entities, tabColors, commandsToRun } = this.state;\r\n        // cardEnt - does a card need to be displayed\r\n\r\n        return (\r\n        <div className=\"encounterAssistant\">\r\n            <CommandLine\r\n                submitCommand={this.submitCommand}\r\n            />\r\n            <Tabs\r\n                tabID={uuid.v4()}\r\n                addTab={this.addTab}\r\n                delTab={this.delTab}\r\n                activeTab={this.state.activeTab}\r\n                activateTab={this.activateTab}\r\n                setTabName={this.setTabName}\r\n                tabColors={tabColors}\r\n                highlightedTabs={this.state.highlightedTabs}\r\n            />\r\n\r\n\r\n            {activeTab != null && tabNames.length-1 >= activeTab && tabNames[activeTab] !== \"\" ?\r\n            <ViewInstance\r\n                width={this.props.width}\r\n                height={this.props.height}\r\n                entities={entities[activeTab]}\r\n                name={tabNames[activeTab]}\r\n                color={tabColors[activeTab]}\r\n                tabColors={tabColors}\r\n                commandsToRun={commandsToRun}\r\n                completeCommands={this.completeCommands}\r\n                getGhostEnts={this.getGhostEnts}\r\n                updateEnts={this.updateEnts}\r\n                highlightTabs={this.highlightTabs}\r\n                unHighlightTabs={this.unHighlightTabs}\r\n                activateTab={this.activateTab}\r\n            />\r\n            :null}\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nEncounterAssistant.propTypes = {\r\n    width: PropTypes.number.isRequired,\r\n    height: PropTypes.number.isRequired,\r\n    state: PropTypes.object.isRequired,\r\n    updateState: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default EncounterAssistant\r\n","import React from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar'\nimport EncounterAssistant from './components/EncounterAssistant'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport uuid from 'uuid'\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            width: 0,\n            height: 0,\n            homePageName: \"Home\",\n            navPages: [{\n                id: uuid.v4(),\n                name: \"Encounter Assistant\",\n                component: \"encounter-assistant\",\n            }, {\n                id: uuid.v4(),\n                name: \"test\",\n                component: \"encounter-assistant\",\n            }],\n            pageStates: [{},{}],\n            colorThemes: [{\n                base: \"#d82b2b\",\n                darkShade: \"#b22323\",\n                lightShade: \"#ff3232\",\n                darkTint: \"d80000\",\n                lightTint: \"d85656\",\n                pureHue: \"#2bd8d8\",\n            }],\n            currentColorTheme: 0,\n        };\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    }\n\n    componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener('resize', this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions() {\n        this.setState({ width: window.innerWidth, height: window.innerHeight });\n    }\n\n    updatePage = (page, state) => {\n        let { pageStates } = this.state;\n        pageStates[page] = state;\n        this.setState({ pageStates });\n    }\n\n    render() {\n        return (\n            <Router>\n                <div className=\"App\">\n                    <Route path=\"/\" render={props => (\n                        <Navbar\n                            home={\"Home\"}\n                            pages={this.state.navPages}\n                            colorTheme={this.state.colorThemes[this.state.currentColorTheme]}\n                        />\n                    )} />\n                    <Route path=\"/encounter-assistant\" render={props => (\n                        <EncounterAssistant\n                            width={this.state.width}\n                            height={this.state.height}\n                            state={this.state.pageStates[0]}\n                            updateState={(state) => this.updatePage(0, state)}\n                        />\n                    )} />\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}